CREATE DATABASE gerenciamento_negocios_db;

USE gerenciamento_negocios_db;

CREATE TABLE Usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    senha VARCHAR(100) NOT NULL
);

CREATE TABLE produtos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    quantidade INT NOT NULL,
    preco DECIMAL(10,2) NOT NULL,
    preco_venda DECIMAL(10,2) NOT NULL DEFAULT 0,
    fornecedor_id INT,
    localizacao ENUM('freezer', 'deposito') NOT NULL,
    FOREIGN KEY (fornecedor_id) REFERENCES fornecedores(id)
);

CREATE TABLE deposito (
    id INT AUTO_INCREMENT PRIMARY KEY,
    produto_id INT,
    quantidade_estoque INT NOT NULL DEFAULT 0,
    FOREIGN KEY (produto_id) REFERENCES produtos(id)
);

CREATE TABLE Freezer (
    id INT AUTO_INCREMENT PRIMARY KEY,
    produto_id INT,
    quantidade_freezer INT NOT NULL DEFAULT 0,
    FOREIGN KEY (produto_id) REFERENCES produtos(id)
);

CREATE TABLE fornecedores (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    telefone VARCHAR(15),
    email VARCHAR(100)
);

CREATE TABLE vendas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_produto INT,
    quantidade_vendida INT,
    mes_ano VARCHAR(7),
    FOREIGN KEY (id_produto) REFERENCES produtos(id)
);

CREATE TABLE PedidoItens (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_pedido INT,
    id_produto INT,
    quantidade INT,
    FOREIGN KEY (id_pedido) REFERENCES Pedidos(id),
    FOREIGN KEY (id_produto) REFERENCES Produtos(id)
);

CREATE TABLE Pedidos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    data_pedido DATE,
    id_fornecedor INT,
    valor_total DECIMAL(10,2),
    status ENUM('pendente', 'concluido') NOT NULL,
    FOREIGN KEY (id_fornecedor) REFERENCES Fornecedores(id)
);

CREATE TABLE Carteira (
    id INT AUTO_INCREMENT PRIMARY KEY,
    mes_ano VARCHAR(7),
    valor_gasto DECIMAL(10, 2)NOT NULL DEFAULT 0,
    valor_lucro DECIMAL(10, 2)NOT NULL DEFAULT 0,
    valor_prejuizo DECIMAL(10, 2)NOT NULL DEFAULT 0
);

if (radioAdicionar.isSelected()) {
    System.out.println("Novo valor no estoque: " + (produtoSelecionado.getQuantidadeEstoque() + quantidadeDigitada));

    try (Connection conexao = ConexaoBD.conectar()) {
        if (produtoSelecionado.getLocalizacao().equals("freezer")) {
            // Atualiza o estoque no freezer
            String updateFreezer = "UPDATE freezer SET quantidade_freezer = quantidade_freezer + ? WHERE produto_id = ?";
            try (PreparedStatement stmtUpdateFreezer = conexao.prepareStatement(updateFreezer)) {
                stmtUpdateFreezer.setInt(1, quantidadeDigitada);
                stmtUpdateFreezer.setInt(2, produtoSelecionado.getId());
                stmtUpdateFreezer.executeUpdate();
            }
        } else {
            // Adiciona a quantidade ao freezer
            String adicionarFreezer = "INSERT INTO freezer (produto_id, quantidade_freezer) VALUES (?, ?)";
            try (PreparedStatement stmtAdicionarFreezer = conexao.prepareStatement(adicionarFreezer)) {
                stmtAdicionarFreezer.setInt(1, produtoSelecionado.getId());
                stmtAdicionarFreezer.setInt(2, quantidadeDigitada);
                stmtAdicionarFreezer.executeUpdate();
            }

            // Subtrai a quantidade do estoque principal (deposito)
            String updateEstoque = "UPDATE produtos SET quantidade = quantidade - ? WHERE id = ?";
            try (PreparedStatement stmtUpdateEstoque = conexao.prepareStatement(updateEstoque)) {
                stmtUpdateEstoque.setInt(1, quantidadeDigitada);
                stmtUpdateEstoque.setInt(2, produtoSelecionado.getId());
                stmtUpdateEstoque.executeUpdate();
            }
        }

        // Consulta para obter o preço e a quantidade do produto
        String consulta = "SELECT preco, quantidade FROM produtos WHERE id = ?";
        try (PreparedStatement stmtConsulta = conexao.prepareStatement(consulta)) {
            stmtConsulta.setInt(1, produtoSelecionado.getId());
            try (ResultSet rsConsulta = stmtConsulta.executeQuery()) {
                if (rsConsulta.next()) {
                    BigDecimal precoUnitario = new BigDecimal(rsConsulta.getString("preco")).divide(new BigDecimal(rsConsulta.getInt("quantidade")), 2, RoundingMode.HALF_UP);

                    // Calcula os gastos com o produto
                    BigDecimal gastosProduto = precoUnitario.multiply(BigDecimal.valueOf(quantidadeDigitada).multiply(BigDecimal.valueOf(rsConsulta.getInt("quantidade"))));

                    // Verifica se já existe um registro para o mês/ano atual na tabela Carteira
                    String verificarRegistro = "SELECT * FROM Carteira WHERE mes_ano = ?";
                    try (PreparedStatement stmtVerificarRegistro = conexao.prepareStatement(verificarRegistro)) {
                        stmtVerificarRegistro.setString(1, LocalDate.now().toString().substring(0, 7)); // Obtém o mês/ano atual
                        try (ResultSet rsVerificarRegistro = stmtVerificarRegistro.executeQuery()) {
                            if (rsVerificarRegistro.next()) {
                                // Se já existe um registro, atualize-o com os novos valores
                                String atualizarGastos = "UPDATE Carteira SET valor_gasto = valor_gasto + ? WHERE mes_ano = ?";
                                try (PreparedStatement stmtAtualizarGastos = conexao.prepareStatement(atualizarGastos)) {
                                    stmtAtualizarGastos.setBigDecimal(1, gastosProduto);
                                    stmtAtualizarGastos.setString(2, LocalDate.now().toString().substring(0, 7)); // Obtém o mês/ano atual
                                    stmtAtualizarGastos.executeUpdate();
                                }
                            } else {
                                // Se não existe um registro, insira um novo registro
                                String inserirGastos = "INSERT INTO Carteira (mes_ano, valor_gasto) VALUES (?, ?)";
                                try (PreparedStatement stmtInserirGastos = conexao.prepareStatement(inserirGastos)) {
                                    stmtInserirGastos.setString(1, LocalDate.now().toString().substring(0, 7)); // Obtém o mês/ano atual
                                    stmtInserirGastos.setBigDecimal(2, gastosProduto);
                                    stmtInserirGastos.executeUpdate();
                                }
                            }
                        }
                    }
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // Trate a exceção conforme necessário
    }
}

